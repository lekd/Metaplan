using System;
using System.Collections.Generic;

//using AppLimit.CloudComputing.SharpBox;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Google.Apis.Drive.v3;

namespace PostIt_Prototype_1.NetworkCommunicator
{
    using File = Google.Apis.Drive.v3.Data.File;
    public class NoteUpdater
    {
        #region Public Constructors
        static NoteUpdater()
        {

        }
        public NoteUpdater(string searchPattern = ".png")
        {
            SearchPattern = searchPattern;
            try
            {                
               
                Storage = new GoogleDriveFS(_driveService);
                InitFolderIfNecessary();
            }
            catch (Exception ex)
            {
                Utilities.UtilitiesLib.LogError(ex);
            }
            _existingNotes = new Dictionary<int, File>();
        }

        #endregion Public Constructors

        #region Public Methods

        public void Close()
        {
            try
            {
                //_driveService.Close();
            }
            catch (Exception ex)
            {
                Utilities.UtilitiesLib.LogError(ex);
            }
        }

        public async void UpdateNotes()
        {
            var newlyUpdatedNotes = await GetUpdatedNotes(DataFolder, SearchPattern);
            DownloadUpdatedNotes(newlyUpdatedNotes);
        }

        #endregion Public Methods

        #region Private Methods

        //download all recently-updated image notes and return them together with their corresponding IDs
        private async void DownloadUpdatedNotes(List<File> updatedFileEntries)
        {
            foreach (File fileEntry in updatedFileEntries)
            {
                try
                {
                    Dictionary<int, Stream> noteFiles = new Dictionary<int, Stream>();
                    var containingFolder = await Storage.GetFileFromIdAsync(fileEntry.Parents.FirstOrDefault());
                    using (MemoryStream memStream = new MemoryStream())
                    {
                        await Storage.DownloadFileAsync(fileEntry.Name, containingFolder, memStream);
                        memStream.Seek(0, 0);
                        //extract ID
                        int noteId = GetIDfromFileName(fileEntry.Name);
                        ProcessMemStream(noteFiles, memStream, noteId);                        
                    }

                    NoteStreamsDownloadedHandler?.Invoke(noteFiles);
                }
                catch (Exception ex)
                {
                    Utilities.UtilitiesLib.LogError(ex);
                }
            }
        }

        protected virtual void ProcessMemStream(Dictionary<int, Stream> noteFiles, MemoryStream memStream, int noteId)
        {
            noteFiles.Add(noteId, memStream);
        }

        private int GetIDfromFileName(string fileName)
        {
            string[] nameComponents = fileName.Split(new string[] { "." }, StringSplitOptions.RemoveEmptyEntries);
            if (nameComponents.Length != 2)
            {
                return -1;
            }
            try
            {
                return Int64.Parse(nameComponents[0]).GetHashCode();
            }
            catch (Exception ex)
            {
                Utilities.UtilitiesLib.LogError(ex);
                return -1;
            }
        }

        private async Task<List<File>> GetUpdatedNotes(string folderPath, string extensionFilter = ".png")
        {
            var folder = await Storage.GetFolderAsync(folderPath);
            var childrenFiles = await Storage.GetFilesInFolderAsync(folder);
            //now process the files
            List<File> updatedNotes = new List<File>();
            foreach (var file in childrenFiles)
            {
                //only process txt files
                if (!file.Name.Contains(extensionFilter))
                {
                    continue;
                }
                //if this is a note generated by Livescribe (file does have ID as filename)
                int id = GetIDfromFileName(file.Name);
                if (id < 0)
                {
                    continue;
                }
                //if this file is not existing, then just put it in
                if (!_existingNotes.ContainsKey(id))
                {
                    _existingNotes.Add(id, file);
                    updatedNotes.Add(file);
                }
                //otherwise we need to check the modification time to see if it's up-to-date or not
                else
                {
                    if (file.ModifiedTime != null && file.ModifiedTime.Value.CompareTo(_existingNotes[id].ModifiedTime) > 0)
                    {
                        updatedNotes.Add(file);
                        _existingNotes[id] = file;
                    }
                }
            }
            /*
            //continue to process with subfolders
            foreach (var subfolder in childrenFolders)
            {
                string subFolderPath = folderPath + "/" + subfolder.Name;
                List<ICloudFileSystemEntry> subUpdatedFiles = getUpdatedNotes(subFolderPath, extensionFilter);
                updatedNotes.AddRange(subUpdatedFiles);
            }
            */
            return updatedNotes;
        }

        private void InitFolderIfNecessary()
        {
            try
            {
                Storage.GetFolderAsync(DataFolder);
            }
            catch (Exception ex)
            {
                Utilities.UtilitiesLib.LogError(ex);
                Storage.CreateFolderAsync(DataFolder);
            }
        }

        #endregion Private Methods

        #region Public Events

        public event NewNoteStreamsDownloaded NoteStreamsDownloadedHandler = null;

        #endregion Public Events

        #region Public Properties

        public GoogleDriveFS Storage { get; private set; }
        public string SearchPattern { get; protected set; }

        #endregion Public Properties

        #region Private Fields

        private const string DataFolder = "MercoNotes";

        private Dictionary<int, File> _existingNotes = null;
        private DriveService _driveService;

        //private ICloudStorageAccessToken storageToken;
       // private readonly CloudStorage _driveService;

        #endregion Private Fields
    }
    public delegate void NewNoteStreamsDownloaded(Dictionary<int, Stream> downloadedNoteStream);

}